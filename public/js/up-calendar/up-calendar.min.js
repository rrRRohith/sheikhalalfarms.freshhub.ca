/**
 * Yep Calendar
 * Original author: vision
 * Licensed under the MIT license
 * https://github.com/shichuan/javascript-patterns/blob/master/jquery-plugin-patterns/highly-configurable-mutable.html
 *
 * CSS Component
 * _toast.scss , _calendar.scss, _calendar-agenda.scss, _preloader.scss
 */
;(function( $, window, document, undefined ){
    // constructor
    var UpCalendar = function( elem, options ){
        this.elem = elem;
        this.$elem = $(elem);
        this.options = options;
        // this.metadata = this.$elem.data( 'plugin-options' );
        this.currentDate = moment().format('YYYY-MM-DD');
        this.currentDateObj = moment(this.currentDate ,'YYYY-MM-DD');
        this.today = this.currentDateObj.format('YYYY-MM-DD');
        this.currentDateInWeek = this.currentDateObj.format('YYYY-MM-DD');
        // console.log('from constructor')
        this.technician_id = 0;
        this.filter_type = 0;
        this.startWeekStr = null;
        this.afterFirstUserAjaxCall = false;
    };

    // the plugin prototype
    UpCalendar.prototype = {

        defaults: {
            lang:'en',
            type: 'gregorian',
            dateFormat: 'YYYY-MM-DD',
            deletePermission:'false',
            editPermission:'false',
            addMonthFormat:'Month',
            monthNameFormat: 'MMMM',
            yearNameFormat:'YYYY',
            getDaysArrayFormat: 'YYYY-MM',
            dateDayFormat: 'D',
            startOfMonth: 'month',
            startOfWeek: 'week',
            nextHtml:'',
            previousHtml: '',
            startTimeHour: 6,
            endTimeHour: 18,
            onOpenAddReminderForm: function (obj, $thisElement) {
                obj.doOpenAddReminderForm($thisElement);
            },
            onSubmitAddReminder: function (obj, $form) {
                obj.doSubmitAddReminder(obj , $form);
            },
            reminders: null,
            token: null,
            remindersAjax: null,
            reminderTypeAjax: null,
            userAjax: null,
            reminderDeleteAjax: null,
            workingDaysAjax : null,
            addActionUrl: null,
            workingDays : [0,1,2,3,4],
            holidayListAjax : null,
            i18n: {
                day : 'Day',
                days : 'Days',
                hour : 'Hour',
                hours : 'Hours',
                minute : 'Minute',
                minutes : 'Minutes',
                before : 'Before',
                joinSign : ',',
                allTechnician : 'All Technician',
                weekView : 'Weekly View',
                agendaView : 'Agenda View',
                search : 'Search...',
                reminderFilters : 'Reminder Filters',
                withoutFilter: 'All',
                addReminder : 'Add Reminder',
                editReminder : 'Edit Reminder',
                technician : 'Technician',
                type : 'Type',
                date: 'Date',
                time : 'Time',
                duration: 'Duration',
                subject: 'Subject',
                description: 'Description',
                notify : 'Notify',
                saveBtn : 'Save',
                deleteConfirm : 'Are you sure to delete this item?',
                cancelBtn : 'Cancel',
                deleteBtn : 'Delete',
                deleteError : 'Unfortunately, an error occurred while deleting',
                reminder_15_ago : '15 min ago',
                reminder_30_ago : '30 min ago',
                reminder_60_ago : '1 hour ago',
                reminder_120_ago : '2 hours ago',
                reminder_180_ago : '3 hours ago',
                reminder_300_ago : '5 hours ago',
                reminder_1440_ago : '1 day ago',
                reminder_2880_ago : '2 days ago',
                reminder_4320_ago : '3 days ago'
            }
        },

        init: function() {
            this.config = $.extend({}, this.defaults, this.options);

            this.setupOptions();
            this.doRenderBasic();
            // this.doRenderWeekView(this.elem, this.today);
            this.bindEvents(this, this.elem);
            // this.$elem.css('color',this.options.color);
            return this;
        },

        setupOptions : function () {
            switch(this.config.lang){
                case 'fa':
                    moment.loadPersian({dialect: 'persian-modern'});
                    break;
                default:
                    break;
            }

            switch( this.config.type) {
                case 'jalali':
                    this.currentDate = moment().format(this.config.dateFormat);
                    break;
                default:
                    this.currentDate = moment().format(this.config.dateFormat);
                    break;
            }

            this.currentDateObj = moment(this.currentDate ,this.config.dateFormat);
            this.today = this.currentDateObj.format(this.config.dateFormat);
            this.currentDateInWeek = this.currentDateObj.format(this.config.dateFormat);
        },

        nextMonth : function () {
            this.currentDateObj.add(1, this.config.addMonthFormat);
        },

        prevMonth : function () {
            this.currentDateObj.subtract(1, this.config.addMonthFormat);
        },

        getMonthName : function (date) {
            if(date !== undefined){
                return date.format( this.config.monthNameFormat );
            } else {
                return this.currentDateObj.format( this.config.monthNameFormat );
            }
        },

        getYearNum : function (date) {
            if(date !== undefined){
                return date.format( this.config.yearNameFormat );
            } else{
                return this.currentDateObj.format( this.config.yearNameFormat );
            }
        },

        getWeekDays: function () {
            var weekDayMin = [],
                dateObj = moment();
            weekDayMin.push(dateObj.startOf('week').clone());
            for(var i = 0; i<6; i++){
                weekDayMin.push( dateObj.add(1, 'day').clone())
            }
            return weekDayMin;
        },

        getWeekDayName : function (date) {
            return moment(date, this.config.dateFormat).format('dddd');
        },

        setTechnician: function (id) {
            this.technician_id = id;
        },

        getTechnician : function () {
            return this.technician_id;
        },

        setFilterType : function (id) {
            this.filter_type = id;
        },

        getFilterType : function () {
            return this.filter_type;
        },

        setStartWeekStr : function (day) {
            this.startWeekStr = day;
        },

        getStartWeekStr : function () {
            return this.startWeekStr;
        },

        getCurrentStartDate : function () {
            var temp = this.currentDateObj.clone();
            return temp.startOf(this.config.startOfMonth).format( this.config.dateFormat );
        },

        getCurrentEndDate : function () {
            var temp = this.currentDateObj.clone();
            return temp.endOf(this.config.startOfMonth).format( this.config.dateFormat );
        },

        /**
         * Functional section
         */
        getDaysArrayByMonth : function() {
            var daysInMonth,
                arrDays = [],
                tempDate = this.currentDateObj.clone();

            switch (this.config.type){
                case 'jalali':
                    daysInMonth = moment.jDaysInMonth( Number(this.currentDateObj.format('jYYYY')), Number(this.currentDateObj.format('jM'))-1 );
                    tempDate.jMonth(Number(this.currentDateObj.format('jM'))-1);
                    tempDate.startOf('jMonth');
                    break;
                default:
                    daysInMonth = this.currentDateObj.daysInMonth();
                    tempDate.month(Number(this.currentDateObj.format('M'))-1);
                    tempDate.startOf('month');
            }

            for(var i=1; i<=daysInMonth; i++) {
                var current = tempDate.clone();
                arrDays.push(current);
                tempDate.add(1,'day');
            }

            return arrDays;
        },

        preLoader : function (elem, status, type) {
            type = type || 1;
            var html = '<div class="preloader"></div>';
            var backdrop = '<div class="preloader preloader-lg"></div>\n'+
                '         <div class="preloader-backdrop"></div>';
            if (status === true) {
                if (type === 1) {
                    elem.find('clr-icon').hide();
                    elem.prepend(html);
                    elem.prop("disabled", true).addClass('disabled');
                }
                else if (type === 2) {
                    elem.prepend(backdrop);
                }
            } else {
                if (type === 1) {
                    elem.find('clr-icon').show();
                    elem.find('.preloader').remove();
                    elem.prop("disabled", false).removeClass('disabled');
                }
                else if (type === 2) {
                    elem.find('.preloader-backdrop').remove();
                    elem.find('.preloader').remove();
                }
            }
        },

        toast : function (param) {
            $('body').append('<div class="toast-box">' + param + '</div>');
            $('.toast-box').addClass('show');
            setTimeout(function () {
                $('.toast-box').remove();
            }, 3000);
        },

        getMinToDays : function (minutes) {

            var days = Math.floor(minutes / (60*24));
            minutes  -= days*60*24;
            var hrs   = Math.floor(minutes / 60);
            minutes  -= hrs*60;
            var mnts = Math.floor(minutes);

            var output = [];
            output.push(days > 0 ? days + ' ' +(days === 1 ? this.config.i18n.day : this.config.i18n.days ) : '');
            output.push(hrs > 0 ? ' ' + hrs + ' ' + (hrs === 1 ? this.config.i18n.hour :  this.config.i18n.hours ) : '');
            output.push(mnts > 0 ? ' ' + mnts + ' ' + (mnts === 1 ? this.config.i18n.minute : this.config.i18n.minutes ) : '');

            return output.filter(function (val) { return val !== ''; }).join(this.config.i18n.joinSign) + ' ' + this.config.i18n.before;
        },

        /**
         * Click action bind
         */
        bindEvents: function (obj, el) {
            // action for click on day number
            $(document).on('click','.calendar-month-day-num',function (e) {
                e.preventDefault();
                $(this).addClass('active').siblings().removeClass('active');
                obj.currentDateInWeek = $(this).attr('data-date');
                obj.doRenderWeekView(el);
            });

            $(document).on('click','.js-calendar-next',function(e){
                e.preventDefault();
                obj.nextMonth();
                obj.doRenderMonth(el);
            });

            $(document).on('click','.js-calendar-previous',function(e){
                e.preventDefault();
                obj.prevMonth();
                obj.doRenderMonth(el);
            });

            // add reminder by click on cell
            $(document).on('click','.calendar-cells-item-hour',function (e) {
                e.preventDefault();
                obj.config.onOpenAddReminderForm( obj, $(this) );
            });

            // submit form by
            $(document).on('click','.js-submit-add-reminder',function (e) {
                e.preventDefault();
                obj.doCloseModal();
                var form = $(this).closest('form');
                obj.config.onSubmitAddReminder( obj, form );
            });

            // toggle class by click to assign active class for popover
            $(document).on('click','.calendar-note-reminder',function (e) {
                e.preventDefault();
                $(this).toggleClass('active');
            });

            // switch reminder show
            $(document).on('change','.js-reminder-mode',function (e) {
                e.preventDefault();
                if ($(this).val() === '1') {
                    $(el).find('.calendar-wrapper').removeClass('hide');
                    $(el).find('.calendar-agenda').addClass('hide');
                    $(el).find('.calendar-sidebar').removeClass('calendar-remove-margin');
                    $(el).find('.calendar-free-space').removeClass('calendar-remove-free-space');
                }
                else if ($(this).val() === '2') {
                    $(el).find('.calendar-wrapper').addClass('hide');
                    $(el).find('.calendar-agenda').removeClass('hide').addClass('calendar-remove-margin');
                    $(el).find('.calendar-sidebar').addClass('calendar-remove-margin');
                    $(el).find('.calendar-free-space').addClass('calendar-remove-free-space');
                }
            });


            // live search in
            $(document).on('change paste keyup','.js-live-calendar-search', function (e) {
                // get input text & define count
                var val =$(this).val(),
                    count = 0;
                // if search input value != ''
                if (val !== '') {
                    // iterate all match tag
                    $(el).find('.calendar-note-reminder').each(function () {
                        // If the item does not contain the text phrase fade it out
                        if ($(this).text().search(new RegExp(val, "i")) < 0) {
                            $(this).fadeOut(200);
                        } else {
                            // Show the list item if the phrase matches and increase the count by 1
                            $(this).fadeIn(200);
                        }
                    })
                } else{
                    $(el).find('.calendar-note-reminder').fadeIn(200);
                }

            })

            // filter by user
            $(document).on('change','.js-users',function (e) {
                e.preventDefault();
                obj.setTechnician($(this).val());
                obj.doRenderWeekView( el );
            });

            // filter by remember type
            $(document).on('change','.js-reminder-type', function (e) {
                e.preventDefault();
                obj.setFilterType($(this).val());
                obj.doRenderWeekView( el );
            });

            // click remove btn
            $(document).on('click','.calendar-box-reminder-delete', function (e) {
                e.preventDefault();
                $('.js-delete-reminder-action, .modal-backdrop').addClass('open');
                $('.js-delete-reminder-confirm').attr('data-reminder-id', $(this).attr('data-id'));
            });

            // click on close btn in modal
            $(document).on('click','.js-delete-reminder-delete-close', function (e) {
                e.preventDefault();
                $('.js-delete-reminder-action, .modal-backdrop').removeClass('open');
            });

            // click on confirm delete
            $(document).on('click','.js-delete-reminder-confirm', function (e) {
                e.preventDefault();
                var reminderId = $(this).attr('data-reminder-id');
                obj.doReminderDeleteAjax(obj, el, reminderId);
                $('.js-delete-reminder-action, .modal-backdrop').removeClass('open');
                $(el).find('.calendar-box-reminder-delete[data-id="'+ reminderId +'"]').closest('.calendar-note-reminder').fadeOut(300);
            });


            // open modal for edit reminder
            $(document).on('click','.calendar-box-reminder-edit', function (e) {
                e.preventDefault();
                var reminder = $(this).closest('.calendar-box-reminder-body').find('[name="reminder"]').val();
                obj.doOpenModal('edit', JSON.parse(reminder));
            });
        },


        /**
         * Render HTML DOM
         */
        doRenderBasic : function () {
            // append basic html
            $(this.getBasicHtml()).appendTo(this.$elem);
            $(this.getBasicAddEditModal()).appendTo('body');
            $('[name="reminder_time"],[name="reminder_duration"]').inputmask("hh:mm");

            $(this.getBasicDeleteModal()).appendTo('body');
            // render time
            this.doRenderTime(this.elem);
            this.doRenderCell(this.elem, this.config);
            this.doRenderMonth(this.elem);
            this.doRenderWeekView(this.elem);
            this.doReminderTypeAjax(this, this.elem);
            this.doUserAjaxCallback(this, this.elem);
            // this.doHolidayListAjax(this);
        },

        doRenderMonth: function (el) {
            var obj = this;

            // render month & year
            $(el).find('.js-month-name-month-view').text(this.getMonthName() + ' ' + this.getYearNum());

            // render weekdays
            $(el).find('.calendar-month-header').empty(); // null for append
            $.each(this.getWeekDays(), function (key, val) {
                $(el).find('.calendar-month-header').append('<div class="calendar-month-day-name ">'+val.format('dd') +'</div>')
            });
            // render small month view
            this.doRenderMonthDaysView(this, el);
        },

        doRenderMonthDaysView : function (obj, el) {

            var schedule = this.getDaysArrayByMonth();
            var startDayOfMonth = this.currentDateObj.startOf( this.config.startOfMonth ).format('dd');

            $(el).find('.calendar-month-days').empty(); // null for append

            var dayHeaderIndex = $(el).find('.calendar-month-day-name:contains('+startDayOfMonth+')').index();
            for(var i=0; i<dayHeaderIndex; i++){
                $(el).find('.calendar-month-days').append('<a href="#" class="calendar-month-day-num number"></a>');
            }

            var today = this.today;
            schedule.forEach(function(item) {
                if(today === item.format( obj.config.dateFormat )){
                    $(el).find('.calendar-month-days').append('<a href="#" class="calendar-month-day-num number current-day '+ (obj.config.workingDays.indexOf(Number(item.format('d'))) === -1 ? 'calendar-holiday' : '' ) +'" data-date="'+item.format(obj.config.dateFormat) + '">'+item.format(obj.config.dateDayFormat)+'</a>')
                }
                else {
                    $(el).find('.calendar-month-days').append('<a href="#" class="calendar-month-day-num number '+ (obj.config.workingDays.indexOf(Number(item.format('d'))) === -1 ? 'calendar-holiday' : '' ) +'" data-date="'+item.format(obj.config.dateFormat)+'">'+item.format(obj.config.dateDayFormat)+'</a>')
                }
            });

            // Render Holiday
            this.doHolidayListAjax(this);
        },

        getBasicHtml : function () {
            return '' +
                '<div class="row">' +
                '<div class="col-lg-3 calendar-sidebar">' +
                '<div class="row">' +
                '<div class="col-lg-12 col-md-6 col-sm-6">' +
                '<div class="input-group">' +
                '<input name="name" class="form-control js-live-calendar-search" placeholder="'+ this.config.i18n.search +'">' +
                '<div class="input-group-append">' +
                '<span class="input-group-text">' +
                '<clr-icon shape="search"></clr-icon>' +
                '</span>' +
                '</div>' +
                '</div>' +
                '<div class="calendar-month">' +
                '<div class="calendar-month-top row mt-1">' +
                '<div class="col-lg-12">' +
                '<div class="calendar-arrows calendar-arrows-space-between">' +
                '<span class="number calendar-month-top-month-name js-month-name-month-view"></span>' +
                '<div class="calendar-arrows-item">' +
                '<a class="calendar-nav js-calendar-previous" href="#">' +
                '<clr-icon shape="caret right"></clr-icon>' +
                '</a>' +
                '<a class="calendar-nav js-calendar-next" href="#">' +
                '<clr-icon shape="caret left"></clr-icon>' +
                '</a>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="calendar-month-header">' +
                // month day list
                '</div>' +
                '<div class="calendar-month-days">' +
                // month days
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="col-lg-12 col-md-6 col-sm-6">' +
                '<div class="reminder-filter mt-1 pt-1">' +
                '<h6 class="reminder-filter-title">'+ this.config.i18n.reminderFilters +'</h6>' +
                '<ul class="reminder-filter-list">' +
                '<div class="radio reminder-radio">' +
                '<input type="radio" name="color" id="color0" checked="" class="js-reminder-type" value="0">' +
                '<label for="color0" class="color-0">'+ this.config.i18n.withoutFilter +'</label>' +
                '</div>' +
                // li list of reminder type
                '</ul>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="col-lg-9 calendar">' +
                '<div class="calendar-filter">' +
                '<div class="calendar-free-space"></div>' +
                '<div class="calendar-filter-item">' +
                '<div class="calendar-filter-item">' +
                '<select class="form-control js-reminder-mode">' +
                '<option value="1">'+ this.config.i18n.weekView +'</option>' +
                '<option value="2">'+ this.config.i18n.agendaView +'</option>' +
                '</select>' +
                '</div>' +
                '<div class="calendar-filter-item calendar-month-name">' +
                '<div class="calendar-arrows">' +
                '<span class="number calendar-month-top-month-name js-month-name-week-view"></span>' +
                '</div>' +
                '</div>' +
                '<div class="calendar-filter-item">' +
                '<select class="form-control js-users">' +
                '<option value="0">'+ this.config.i18n.allTechnician +'</option>' +
                '</select>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="calendar-wrapper mt-1">' +
                '<div class="calendar-top">' +
                '<div class="calendar-free-space"></div>' +
                '<div class="calendar-header">' +
                '<div class="calendar-header-item">' +
                '<span class="calendar-header-item-day"></span><span class="calendar-header-item-date number">7</span>' +
                '</div>' +
                '<div class="calendar-header-item">' +
                '<span class="calendar-header-item-day"></span><span class="calendar-header-item-date number">8</span>' +
                '</div>' +
                '<div class="calendar-header-item">' +
                '<span class="calendar-header-item-day"></span> <span class="calendar-header-item-date number">9</span>' +
                '</div>' +
                '<div class="calendar-header-item">' +
                '<span class="calendar-header-item-day"> </span> <span class="calendar-header-item-date number">10</span>' +
                '</div>' +
                '<div class="calendar-header-item">' +
                '<span class="calendar-header-item-day"></span> <span class="calendar-header-item-date number">11</span>' +
                '</div>' +
                '<div class="calendar-header-item">' +
                '<span class="calendar-header-item-day"> </span> <span class="calendar-header-item-date number">12</span>' +
                '</div>' +
                '<div class="calendar-header-item">' +
                '<span class="calendar-header-item-day"></span> <span class="calendar-header-item-date number">13</span>' +
                '</div>' +
                '<div class="calendar-scroll-free-space"></div>' +
                '</div>' +
                '</div>' +
                '<div class="calendar-body">' +
                '<div class="calendar-body-hours">' +
                // fill by time
                '</div>' +
                '<div class="calendar-cells-container">' +
                '<div class="calendar-cells-item hidden-days">' +
                //fill by div that keep cell
                '</div>' +
                '<div class="calendar-cells-item hidden-days">' +
                //fill by div that keep cell
                '</div>' +
                '<div class="calendar-cells-item hidden-days">' +
                //fill by div that keep cell
                '</div>' +
                '<div class="calendar-cells-item hidden-days">' +
                //fill by div that keep cell
                '</div>' +
                '<div class="calendar-cells-item hidden-days">' +
                //fill by div that keep cell
                '</div>' +
                '<div class="calendar-cells-item hidden-days">' +
                //fill by div that keep cell
                '</div>' +
                '<div class="calendar-cells-item hidden-days">' +
                //fill by div that keep cell
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="calendar-agenda mt-1 hide">' +
                '<ul class="calendar-agenda-list mt-1">' +
                // fill bby agenda record
                '</ul>' +
                '</div>' +
                '</div>' +
                '</div>';

        },

        doRenderTime: function (el) {
            for (var i = this.config.startTimeHour + 1; i <= this.config.endTimeHour; i++) {
                $(el).find('.calendar-body-hours').append('<div class="number calendar-body-hours-item">' + i + ':00</div>');
            }
        },

        doRenderCell: function (el, config) {
            $(el).find('.calendar-cells-item').each(function () {
                for (var i = config.startTimeHour; i <= config.endTimeHour; i++) {
                    // if time less than 10 should be 01-09
                    // else echo normal
                    $(this).append('<div class="calendar-cells-item-hour" data-time="'+ i +'"></div>');
                }
            });
        },

        doRenderWeekView : function (el) {
            var startWeek,
                startWeekString,
                weekArr = [],
                date = this.currentDateInWeek,
                today = this.today,
                config = this.config;

            // init start week by type of calendar
            switch(this.config.type){
                case 'jalali':
                    startWeek = moment(date, config.dateFormat).startOf( config.startOfWeek);
                    break;
                default:
                    startWeek = moment(date).startOf( config.startOfWeek);
            }

            // render month and year of current week
            $(el).find('.js-month-name-week-view').text(this.getMonthName(startWeek) + ' ' + this.getYearNum(startWeek));

            // empty
            $(el).find('.calendar-header').empty();
            $(el).find('.calendar-note-reminder').remove();

            weekArr.push(startWeek.add(0,'day').clone());
            for(var i=0; i<=6; i++){
                weekArr.push(startWeek.add(1,'day').clone());
                $(el).find('.calendar-header').append('' +
                    '<div class="calendar-header-item hidden-days" data-date="'+weekArr[i].format( config.dateFormat )+'">' +
                    '<span class="calendar-header-item-day">'+weekArr[i].format('dddd')+'</span>' +
                    '<span class="calendar-header-item-date number">'+ weekArr[i].format( config.dateDayFormat ) +'</span>' +
                    '</div>');
            }

            // add active class to current day in week
            var headerItemIndex = $(el).find('.calendar-header-item').filter(function() {
                return $(this).attr('data-date') === today;
            }).addClass('current-day').removeClass('hidden-days').index();
            // add active class in current day columns in mobile
            $(el).find('.calendar-cells-item').eq(headerItemIndex).removeClass('hidden-days');


            // call ajax callback to fill reminders
            startWeekString = weekArr[0].format( config.dateFormat);
            this.setStartWeekStr(startWeekString);

            // we need to get current user ID and after that call
            if(this.afterFirstUserAjaxCall){
                this.doReminderAjaxCallback(this, el, this.getStartWeekStr());
            }
        },

        doOpenAddReminderForm : function ($thisElement) {
            // hard code to open modal for add reminder
            var modal = this.doOpenModal();

            // get current date & time
            this.setDateTimeInModal($thisElement, modal);

        },

        doOpenModal: function (type, reminder) {
            var modal = $('.js-add-reminder-modal');
            modal.addClass("open");

            switch (type){
                case 'edit':
                    modal.find('.modal-title').text(this.config.i18n.editReminder);
                    modal.find('[name="_method"]').val('put');
                    modal.find('form').append('<input type="hidden" name="id" value="'+ reminder.id +'">');
                    modal.find('form').attr('action','reminders/update');
                    modal.find('[name="reminder_filter_type_id"]').val(reminder.type);
                    modal.find('[name="technician_id"]').val(reminder.technician_id);
                    modal.find('[name="reminder_date"]').val(reminder.date);
                    modal.find('[name="reminder_time"]').val(reminder.time);
                    modal.find('[name="reminder_duration"]').val(reminder.duration);
                    modal.find('[name="reminder_notification_time"]').val(reminder.notification_time);
                    modal.find('[name="reminder_title"]').val(reminder.title);
                    modal.find('[name="reminder_description"]').val(reminder.description);
                    break;
                default:
                    //  $(".modal-backdrop").addClass("open");
                    modal.find('.modal-title').text(this.config.i18n.addReminder);
                    modal.find('[name="_method"]').val('post');
                    modal.find('[name="id"]').remove();
                    modal.find('form').attr('action','reminders');
                    modal.find('[name="reminder_date"]').val('');
                    modal.find('[name="reminder_time"]').val('');
                    modal.find('[name="reminder_title"]').val('');
                    modal.find('[name="reminder_description"]').val('');
                    break;
            }

            return modal;
        },

        doCloseModal: function () {
            var modal = $('.js-add-reminder-modal');
            modal.removeClass("open");
            $(".modal-backdrop").removeClass("open");
        },

        setDateTimeInModal: function ($thisElement, modal) {
            var currentTimeCell = $thisElement.attr('data-time');
            currentTimeCell = currentTimeCell < 10 ? '0' + currentTimeCell : currentTimeCell;
            var currentDayIndex = $thisElement.parent('.calendar-cells-item').index();
            var currentDayDate = $thisElement.closest('.calendar-wrapper').find('.calendar-header-item').eq(currentDayIndex).attr('data-date');

            modal.find('.js-reminder-date').val(currentDayDate);
            modal.find('.js-reminder-time').val(currentTimeCell + ':00');
        },

        doSubmitAddReminder: function (obj , $form) {
            console.log(obj , $form);
            var params = $form.serialize();
            $.ajax({
                url: $form.attr('action') + '?' + params,
                type: $form.attr('method'),
                success: function (res) {
                    console.log('Success Ajax');
                },
                error: function (err) {
                    console.log(err);
                }
            })
        },

        /**
         * Fill reminders in calendar
         */
        getBasicNoteHtml : function (reminder, reminderHeight, top, dayIndex) {
            return '' +
                "<div class='calendar-note-reminder color-bg"+reminder.type+"' style='top:"+ top +"px;'>" +
                "<a class='calendar-note-text' style='height:"+ reminderHeight +"px;' href='#'>"+ reminder.title +"</a>" +
                "<div class='calendar-box-reminder "+ (dayIndex > 3 ? "calendar-box-reminder-reverse" : "")  +"'>" +
                "<div class='calendar-box-reminder-header'>" +
                "<h6 class='calendar-box-reminder-header-title'>"+ reminder.title +"</h6>" +
                "<button class='close close-box-reminder' type='button'>" +
                "<clr-icon aria-hidden='true' shape='close'></clr-icon>" +
                "</button>" +
                "</div>" +
                "<div class='calendar-box-reminder-body'>" +
                "<input type='hidden' name='reminder' value='"+ JSON.stringify(reminder) +"'>" +
                "<p class='calendar-box-reminder-des mt-1'>"+ reminder.description +"</p>" +
                "<div class='calendar-box-reminder-technician'>" +
                "<clr-icon shape='user' class='is-solid'></clr-icon>" +
                "<span class='number'>"+ reminder.technician +"</span>" +
                "</div>" +
                "<div class='calendar-box-reminder-date'>" +
                "<clr-icon shape='alarm-clock'></clr-icon>" +
                "<span class='number'>"+ this.getMinToDays(reminder.notification_time) +"</span>" +
                "</div>" +
                "<a style='display:"+(this.config.editPermission === 'false' ? 'none;' : 'block;')+"' class='calendar-box-reminder-edit' href='#' data-id='"+ reminder.id +"'>" +
                "<clr-icon shape='pencil' class='is-solid'></clr-icon>" +
                "</a>" +
                "<a style='display:"+(this.config.deletePermission === 'false' ? 'none;' : 'block;')+"' class='calendar-box-reminder-delete' href='#' data-id='"+ reminder.id +"'>" +
                "<clr-icon shape='trash' class='is-solid'></clr-icon>" +
                "</a>" +
                "</div>" +
                "</div>" +
                "</div>";
        },

        getBasicDeleteModal : function () {
            return '' +
                '<div class="modal js-delete-reminder-action">' +
                '<div class="modal-dialog" role="dialog" aria-hidden="true">'+
                '<div class="modal-content">' +
                '<div class="modal-header">' +
                '<button aria-label="Close" class="close js-delete-reminder-delete-close" type="button">' +
                '<clr-icon aria-hidden="true" shape="close"></clr-icon>' +
                '</button>' +
                '<h3 class="modal-title"></h3>' +
                '</div>' +
                '<div class="modal-body">' +
                '<p>'+ this.config.i18n.deleteConfirm +'</p>' +
                '</div>' +
                '<div class="modal-footer">' +
                '<button class="btn btn-outline js-delete-reminder-delete-close" type="button">'+ this.config.i18n.cancelBtn +'</button>' +
                '<button class="btn btn-primary js-delete-reminder-confirm" type="button" >'+ this.config.i18n.deleteBtn +'</button>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>'
        },

        getBasicAddEditModal : function () {
            return '' +
                '<div class="modal js-add-reminder-modal">' +
                '<div class="modal-dialog" role="dialog" aria-hidden="true">' +
                '<div class="modal-content">' +
                '<form class="form-horizontal" method="POST" action="'+ this.config.addActionUrl +'">' +
                '<div class="modal-header">' +
                '<button aria-label="Close" class="close" type="button" onClick="cancelModal()">' +
                '<clr-icon aria-hidden="true" shape="close"></clr-icon>' +
                '</button>' +
                '<h3 class="modal-title">'+ this.config.i18n.addReminder +'</h3>' +
                '</div>' +
                '<div class="modal-body">' +
                '<input type="hidden" name="_method" value="post">' +
                '<div class="form-group row">' +
                '<div class="col-lg-2 col-md-2 col-sm-12 text-right no-md-padding">' +
                '<label class="text-gray-dark">'+ this.config.i18n.type +'</label>' +
                '</div>' +
                '<div class="col-lg-4 col-md-4 col-sm-12">' +
                '<select name="reminder_filter_type_id" type="text" class="form-control number">' +

                '</select>' +
                '</div>' +
                '<div class="col-lg-2 col-md-2 col-sm-12 text-right no-md-padding">' +
                '<label class="text-gray-dark">'+ this.config.i18n.technician +'</label>' +
                '</div>' +
                '<div class="col-lg-4 col-md-4 col-sm-12">' +
                '<select type="text" class="form-control" name="technician_id" id="select-technician">' +

                '</select>' +
                '</div>' +
                '</div>' +
                '<div class="form-group row">' +
                '<div class="col-lg-2 col-md-2 col-sm-12 text-right no-md-padding">' +
                '<label class="text-gray-dark">'+ this.config.i18n.date +'</label>' +
                '</div>' +
                '<div class="col-lg-4 col-md-4 col-sm-12">' +
                '<input name="reminder_date" type="text" class="form-control number js-reminder-date">' +
                '</div>' +
                '<div class="col-lg-2 col-md-2 col-sm-12 text-right no-md-padding">' +
                '<label class="text-gray-dark">'+ this.config.i18n.time +'</label>' +
                '</div>' +
                '<div class="col-lg-4 col-md-4 col-sm-12">' +
                '<input name="reminder_time" type="text" class="form-control number js-reminder-time">' +
                '</div>' +
                '</div>' +
                '<div class="form-group row">' +
                '<div class="col-lg-2 col-md-2 col-sm-12 text-right no-md-padding">' +
                '<label class="text-gray-dark">'+ this.config.i18n.duration +'</label>' +
                '</div>' +
                '<div class="col-lg-4 col-md-4 col-sm-12">' +
                '<input type="text" name="reminder_duration" class="form-control number"  value="01:00">' +
                '</div>' +
                '<div class="col-lg-2 col-md-2 col-sm-12 text-right no-md-padding">' +
                '<label class="text-gray-dark">'+ this.config.i18n.notify +'</label>' +
                '</div>' +
                '<div class="col-lg-4 col-md-4 col-sm-12">' +
                '<select name="reminder_notification_time" type="text" class="form-control number">' +
                '<option value="15">'+this.config.i18n.reminder_15_ago+'</option>' +
                '<option value="30">'+this.config.i18n.reminder_30_ago+'</option>' +
                '<option value="60">'+this.config.i18n.reminder_60_ago+'</option>' +
                '<option value="120">'+this.config.i18n.reminder_120_ago+'</option>' +
                '<option value="180">'+this.config.i18n.reminder_180_ago+'</option>' +
                '<option value="300">'+this.config.i18n.reminder_300_ago+'</option>' +
                '<option value="1440">'+this.config.i18n.reminder_1440_ago+'</option>' +
                '<option value="2880">'+this.config.i18n.reminder_2880_ago+'</option>' +
                '<option value="4320">'+this.config.i18n.reminder_4320_ago+'</option>' +
                '</select>' +
                '</div>' +
                '</div>' +
                '<div class="form-group row">' +
                '<div class="col-lg-2 col-md-2 col-sm-12 text-right no-md-padding">' +
                '<label class="text-gray-dark">'+ this.config.i18n.subject +'</label>' +
                '</div>' +
                '<div class="col-lg-10 col-md-10  col-sm-12">' +
                '<input  name="reminder_title" type="text" class="form-control">' +
                '</div>' +
                '</div> ' +
                '<div class="form-group row">' +
                '<div class="col-lg-2 col-md-2 col-sm-12 text-right no-md-padding">' +
                '<label class="text-gray-dark">'+ this.config.i18n.description +'</label>' +
                '</div>' +
                '<div class="col-lg-10 col-md-10 col-sm-12">' +
                '<textarea name="reminder_description" type="text" class="form-control" rows="2"></textarea>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '<div class="modal-footer">' +
                '<div class="col-lg-3 col-md-5 col-sm-8">' +
                '<button class="btn btn-success btn-block" type="submit">' +
                '<clr-icon shape="floppy"></clr-icon> '+ this.config.i18n.saveBtn +
                '</button>' +
                '</div>' +
                '</div>' +
                '</form>' +
                '</div>' +
                '</div>' +
                '</div>';
        },

        doRenderReminders : function (obj, el, reminders) {
            // remove preloader
            this.preLoader( $(el).find('.calendar-wrapper, .calendar-agenda'),false ,2 );

            // prepare reminders for week view
            $.each(reminders, function( index, val ) {
                // match hour with cells
                var tempArr = val.time.split(':'),
                    hour = Number(tempArr[0]),
                    minute = Number(tempArr[1]),
                    offset = $(el).find('.calendar-cells-item-hour:first-child').attr('data-time'),
                    top = ((hour - offset) + (minute / 60)) * 45;

                // get percent of time by 1 hour. 1 hour means 45px
                var durationArr = val.duration.split(':'),
                    reminderHeight = (((Number(durationArr[0])*60) + Number( durationArr[1] )) / 60) * 45;

                // find related cell by date & time
                var reminderDayIndex = $(el).find('.calendar-header [data-date="'+ val.date +'"]').index(),
                    reminderDayCell = $(el).find('.calendar-cells-item').eq(reminderDayIndex);
                // .find('[data-time="'+ hour +'"]');

                // if find match data-date
                if(reminderDayIndex !== -1){
                    reminderDayCell.append( obj.getBasicNoteHtml(val, reminderHeight, top, reminderDayIndex) );
                    //reminderDayCell.find('[name="reminder"]').val( JSON.stringify(val) ); // append json format
                }
            });

            //
            // prepare reminders for agenda view
            //
            var tempArr = reminders.reduce(function (obj, item) {
                obj[item.date] = obj[item.date] || [];
                obj[item.date].push(item);
                return obj;
            }, Object.create(null));
            // console.log( tempArr );
            this.doRenderAgenda(obj, el, tempArr);
        },

        getBasicReminderType : function (type) {
            return '' +
                '<li class="reminder-filter-list-item">' +
                '<div class="radio reminder-radio">' +
                '<input type="radio" name="color" id="color'+type.id+'" class="js-reminder-type" value="'+type.id+'">' +
                '<label for="color'+type.id+'" class="color-'+type.color+'">'+type.title+'</label>' +
                '</div>' +
                '</li>';
        },

        doRenderRemindersType : function (obj, el, reminderTypes) {
            // reminders types
            $.each(reminderTypes, function( index, val ) {
                $(el).find('.reminder-filter-list').append(obj.getBasicReminderType(val));
            });

            // disable preloader
            this.preLoader( $(el).find('.reminder-filter'),false,2 );
        },

        doRenderUser : function (obj, el, users) {
            $.each(users, function (index, val) {
                $(el).find('.js-users').append('<option value="'+val.id+'" '+ (val.active === 1 ? 'selected' : '') +'>'+ val.name + ' ' + val.family +'</option>')
            })
        },

        doRenderAgenda : function (obj, el, remindersArr) {
            // empty list
            $(el).find('.calendar-agenda-list').empty();

            $.each(remindersArr, function (key, val) {
                // save current html to variable to use in next action
                var currentHtml = $(obj.getAgendaDayHtml(key, obj.getWeekDayName(key)));
                // append day name and date to agenda
                $(el).find('.calendar-agenda-list').append(currentHtml);

                // render reminder in day
                $.each(val, function (k, v) {
                    // append list reminders to agenda day
                    currentHtml.find('.calendar-agenda-list-works').append(obj.getAgendaReminderHtml(v));
                })

            });
        },

        getAgendaDayHtml : function (date, dayName) {
            return '' +
                '<li class="calendar-agenda-list-item">' +
                '<div class="calendar-agenda-header">' +
                '<h6 class="calendar-agenda-list-item-header-day">'+ dayName +'</h6>' +
                '<h6 class="calendar-agenda-list-item-header-date number">'+ date +'</h6>' +
                '</div>' +
                '<ul class="calendar-agenda-list-works">' +
                // fill in next step
                '</ul>' +
                '</li>'
        },

        getAgendaReminderHtml : function (reminder) {
            return '' +
                '<li class="calendar-agenda-list-work-item">' +
                '<h6 class="calendar-agenda-list-work-title">' +
                '<span class="calendar-agenda-dot color-bg'+ reminder.type +'"></span>' + reminder.title +
                '</h6>' +
                '<div class="calendar-agenda-list-work-time number">' +
                '<span class="calendar-agenda-list-work-icon">' +
                '<clr-icon shape="alarm-clock"></clr-icon>' +
                '</span>' + reminder.time + '- (' + reminder.duration +')'+
                '</div>' +
                '<div class="calendar-agenda-list-work-tec">' +
                '<span class="calendar-agenda-list-work-icon">' +
                '<clr-icon shape="user" class="is-solid"></clr-icon>' +
                '</span>' + reminder.technician +
                '</div>' +
                '</li>'
        },

        doRenderUserOptionModal : function (users) {
            $.each(users, function (index, val) {
                $('body').find('.js-add-reminder-modal [name="technician_id"]').append('<option value="'+val.id+'" '+ (val.active === 1 ? 'selected' : '') +'>'+ val.name + ' ' + val.family +'</option>')
            })
        },

        doRenderReminderTypeOptionModal : function (types) {
            $.each(types, function (index, val) {
                $('body').find('.js-add-reminder-modal [name="reminder_filter_type_id"]').append('<option value="'+ val.id +'">' + val.title +'</option>');
            })
        },

        doRenderHolidayList : function (holidayArr) {
            var days = this.$elem.find('.calendar-month-day-num');

            $.each(days, function (index, val) {
                var el = $(this);

                holidayArr.forEach(function (val, index) {
                    if( el.attr('data-date') === val.date ){
                        el.addClass('calendar-holiday').attr('data-id',val.id);
                        if (val.description !== ""){
                            el.attr('rel','tooltip').attr('data-tooltip',val.description);
                        }
                    }
                });
            })

        },

        /**
         * Ajax Callback
         */
        doReminderAjaxCallback: function (obj, el , startOfWeek, filter_type, technician_id) {
            if(this.config.remindersAjax !== null){
                // enable preloader
                this.preLoader( $(el).find('.calendar-wrapper, .calendar-agenda'),true,2 );

                // ajax request
                $.ajax({
                    url: this.config.remindersAjax.url,
                    type: this.config.remindersAjax.type,
                    data: {_token: this.config.token, startweek: startOfWeek, filter_type: obj.getFilterType(), technician_id: obj.getTechnician()},
                    success: function (res) {
                        obj.doRenderReminders(obj, el, res);
                    },
                    error: function (err) {
                        console.error(err)
                    }
                })
            }
        },

        doReminderTypeAjax : function (obj, el) {
            if(this.config.reminderTypeAjax !== null){
                // enable preloader
                this.preLoader( $(el).find('.reminder-filter'),true,2 );

                // ajax request
                $.ajax({
                    url: this.config.reminderTypeAjax.url,
                    type: this.config.reminderTypeAjax.type,
                    data: {_token: this.config.token},
                    success: function (res) {
                        obj.doRenderRemindersType(obj, el, res);
                        obj.doRenderReminderTypeOptionModal(res);
                    },
                    error: function (err) {
                        console.error(err)
                    }
                })
            }
        },

        doUserAjaxCallback : function (obj, el) {
            if(this.config.userAjax !== null){
                // ajax request

                $.ajax({
                    url: this.config.userAjax.url,
                    type: this.config.userAjax.type,
                    data: {_token: this.config.token},
                    success: function (res) {
                        // get current user id
                        obj.setTechnician(
                            res.filter(function(obj){
                                return obj.active === 1;
                            }).map(function(obj){
                                return obj.id
                            })
                        );

                        obj.doRenderUser(obj, el, res);

                        obj.afterFirstUserAjaxCall = true; //
                        obj.doReminderAjaxCallback(obj, el, obj.getStartWeekStr());

                        obj.doRenderUserOptionModal(res);
                    },
                    error: function (err) {
                        console.error(err)
                    }
                })
            }
        },

        doReminderDeleteAjax : function (obj, el, reminderId) {
            if(this.config.reminderDeleteAjax !== null){
                // ajax request
                $.ajax({
                    url: this.config.reminderDeleteAjax.url + '/' + reminderId,
                    type: this.config.reminderDeleteAjax.type,
                    data: {_token: this.config.token},
                    success: function (res) {
                        // delete ok
                    },
                    error: function (err) {
                        console.error(err);
                        obj.toast(obj.config.i18n.deleteError);
                    }
                })
            }
        },

        doHolidayListAjax : function (obj) {
            this.preLoader( this.$elem.find('.calendar-month'),true, 2);
            if(this.config.holidayListAjax !== null) {
                $.ajax({
                    url: this.config.holidayListAjax.url,
                    type: this.config.holidayListAjax.type,
                    data : {start_date : this.getCurrentStartDate(), end_date : this.getCurrentEndDate() },
                    success: function (res) {
                        obj.preLoader( obj.$elem.find('.calendar-month'), false, 2);
                        obj.doRenderHolidayList(res)
                    },
                    error: function (err) {
                        console.log(err)
                    }
                })
            }
        },
    };

    UpCalendar.defaults = UpCalendar.prototype.defaults;

    $.fn.upcalendar = function(options) {
        return this.each(function() {
            new UpCalendar(this, options).init();
        });
    };
    //optional: window.Plugin = Plugin;
})( jQuery, window , document );